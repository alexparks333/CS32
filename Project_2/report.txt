Description of my doubly-linked list implementation:

I implemented my doubly-linked list by using a struct MapNode for the nodes. Each MapNode contains a key, a value, and the next and prev pointers. Initially, the head and tail pointer for the list are nullptrs and the size of the list is 0. As you insert MapNodes, the size increases and the head and tail pointers are updated to the MapNodes in the beginning and end of the list, respectively. Each MapNode points to the MapNode in front of it and after it; the head MapNode has a nullptr prev and the tail MapNode has a nullptr next. The list is not circular and the last MapNode does not point to the first one. The list is in the order of insertion: earlier a MapNode is inserted, the earlier it is in the list.

EMPTY MAP DIAGRAM:
+--------------------+
|                    |
|                    |
| +----------------+ |      +--------------+
| |                | |      |  nullptr     |
| |      HEAD   +--------------^           |
| |                | |      +--------------+
| +----------------+ |
|                    |
|                    |
|                    |
|                    |
| +----------------+ |
| |                | |      +---------------+
| |      TAIL      | |      |  nullptr      |
| |              +------------^             |
| +----------------+ |      +---------------+
|                    |
|                    |
+--------------------+



TYPICAL MAP DIAGRAM:

          +----------------------------------------------+
          |                                              |
          |                                              |
+--------------------+                                   |
|         |          |                                   |
|         |          |                   +---------+-----v----------+--------+
| +-------+--------+ |                   |  PREV   |     KEY        |  NEXT  |
| |                | |                   |         |                |        |
| |      HEAD      | |                   | nullptr |     VALUE      |        |
| |                | |                   |         |                |        |
| +----------------+ |                   +---------+--^-------------+--+-----+
|                    |                                |                |
|                    |                                |                |
|                    |                                |                |
|                    |                           +----+----+-----------v----+--------+
| +----------------+ |                           |  PREV   |     KEY        |  NEXT  |
| |                | |                           |         |                |        |
| |      TAIL      | |                           |         |     VALUE      |        |
| |       +        | |                           |         |                |        |
| +----------------+ |                           +---------+--^-------------+--+-----+
|         |          |                                        |                |
|         |          |                                        |                |
+--------------------+                                        |                |
          |                                              +----+----+-----------v----+--------+
          |                                              |  PREV   |     KEY        |  NEXT  |
          |                                              |         |                |        |
          |                                              |         |     VALUE      |        |
          |                                              |         |                |        |
          |                                              +---------+--^-------------+--+-----+
          |                                                           |                |
          |                                                           |                |
          |                                                           |                |
          |                                                      +----+----+-----------v----+--------+
          |                                                      |  PREV   |     KEY        |  NEXT  |
          |                                                      |         |                |        |
          |                                                      |         |     VALUE      | nullptr|
          |                                                      |         |      ^         |        |
          |                                                      +---------+----------------+--------+
          |                                                                       |
          |                                                                       |
          +-----------------------------------------------------------------------+





Pseudocode for non-trivial algorithms:

Map::insert

if the Map doesn't contain the given key:
	create a new MapNode and set its key and value with given key and value
	make the current tail point to this one and set next and prev values to reflect this
	set tail of the Map to this new one
	if this is the only MapNode in the list,
		set head of the Map to this one
	else,
		set the current tail's next to this one
	increment size of the Map and return true
else:
	return false


Map::update

if the Map contains the given key:
	traverse through every MapNode in the Map until a nullptr is reached:
		 if the current MapNode's key is the same as the given key,
			set its value to the given value and return true
else:
	return false


Map::insertOrUpdate

if first, updating the MapNode with the given key with the given value fails and second, inserting such a MapNode fails,
	return false
else,
	return true

Map::erase

if the Map contains the given key:
	traverse through every MapNode in the Map until a nullptr is reached:
		 if the current MapNode's key is the same as the given key:
			if this current MapNode is a head or a tail, 
				update the head or tail to its next or previous MapNode, respectively
			if it is not the head,
				point next of the MapNode in front of it to MapNode after it
			if it is not the tail,
				point prev of the MapNode after it to MapNode in front of it
			delete the current MapNode and decrement size of the Map
			return true
else:
	return false


Map::contains

traverse through every MapNode in the Map until a nullptr is reached:
	 if the current MapNode's key is the same as the given key,
		return true
return false


Map::get (without the int parameter)

if the Map contains the given key:
	traverse through every MapNode in the Map until a nullptr is reached:
		 if the current MapNode's key is the same as the given key,
			set the given value to the current MapNode's value and return true
else:
	return false


Map::get (with the int parameter)

if the given int fits the bounds of the LinkedList:
	traverse through MapNodes in the Map for given int times so the current MapNode is "given int"th one in the LinkedList
	set the given key and value to the current MapNode's key and value and return true
else:
	return false


Map::swap

Create and initialize temporary variables for size, head, and tail of the current Map
Set the current Map's members (size, head, and tail) to the other Map's members
Set the other Map's members to the temporary variables


Map::combine

declare a temporary Map, temp that will contain the necessary MapNodes, to be later swapped with result
insert all the MapNodes in the second Map into temp
traverse through all the MapNodes in first Map:
	insert the current MapNode into temp (Map::insert checks if a MapNode exists with the passed key so there won't be any duplicates)
	if the second Map contains the key of the current KeyNode, but their related values are different:
		erase MapNode associated with that key in temp
		set the boolean to be returned to false
swap the temporary Map with the result Map
return false if there were no MapNodes in the two Maps with the same key but different values, else return true


Map::subtract

declare a temporary Map, temp that will contain the necessary MapNodes, to be later swapped with result
traverse through all the MapNodes in first Map:
	insert the current MapNode into temp (Map::insert checks if a MapNode exists with the passed key so there won't be any duplicates)
	if the second Map doesn't contains the key of the current KeyNode,
		insert the current MapNode into temp
swap the temporary Map with the result Map



Test Cases:

The tests were performed on a map from strings to doubles

    Map a,b,c,d,res; //default constructor
    KeyType key, key2;
    ValueType value, value2;
    a.insert("1", 1.8);
    a.insert("2", 1.6);
    a.insert("3", 1.5);
    a.insert("4", 1.2);
    a.insert("vie", 42);

    b.insert("1", 1.8);
    b.insert("2", 99);
    b.insert("20", 22);

    assert(c.empty()); //test empty with empty Map
    assert(!a.empty()); //test empty with non-empty Map
    
    assert(a.size() == 5); //test size
    assert(!a.insert("1", 2.0)); //test insert with existing key
    assert(c.insert("55", 5.5)); //test insert with non-existing key
    c.get("55", value);
    assert(value == 5.5); //test if insert worked
    assert(!c.erase("2")); //test erase with non-existing key
    assert(c.erase("55")); //test erase with existing key
    assert(c.size() == 0); //test size after all MapNodes are erase
    
    
    assert(a.update("2", 22.0)); //test update with existing key
    assert(!a.update("53", 241.1)); //test update with non-existing key, nothing to update
    a.get("2", value);
    assert(value == 22.0); //test if value was updated
    assert(b.insertOrUpdate("19", 19.9)); //test insertOrUpdate, value should be inserted
    assert(b.insertOrUpdate("1", 1.1)); //test insertOrUpdate, value should be updated
    b.get("19", value);
    assert(value == 19.9); //check if value was inserted
    b.get("1", value);
    assert(value == 1.1); //check if value was updated
    
    assert(a.contains("4")); //test contains
    assert(!b.contains("2324309")); //test contains
    
    d.insert("a", 97);
    d.insert("b", 98);
    d.insert("c", 99);
    
    d.get("a", value);
    assert(value == 97); //test get with only key parameter
    
    //test get with int parameter
    for(int i = 0; i < 3; i++)
    {
        d.get(i, key, value);
        assert(value == (i+97));
        assert(int(key.at(0)) == (i+97));
    }
    
    d.swap(c); //swap d with empty Map
    a.swap(b); //swap two non-empty Maps
    assert(d.empty() && c.size() == 3); //test if sizes were swapped
    c.get("b", value);
    assert(value == 98); //test if key/value pairs were swapped
    assert(b.size() == 5 && a.size() == 4); //test if sizes were swapped
    b.get(4, key, value);
    assert(key == "vie" && value == 42); //test if key/value pairs were swapped
    
    d.insert("11", 11.8);
    d.insert("vie", 42);
    assert(combine(b, d, res)); //test combine
    assert(res.contains("vie") && res.contains("11") && res.contains("1") && res.contains("2")
           && res.contains("3") && res.contains("4")); //test if combine creates a correct Map with necessary MapNodes
    d.update("vie", 3.14);
    assert(!combine(b, d, res)); //test combine for 2 Maps with same key but different value
    assert(!res.contains("vie")); //test if the result Map does not contain that key
    
    d.insert("4", 1.2);
    subtract(b, d, res);
    assert(res.contains("1") && res.contains("2") && res.contains("3")); //test subtract creates Map with necessary keys
    subtract(d, b, res);
    assert(res.contains("11") && !res.contains("vie")); //test subtract but with order of Maps reversed
    
    c = a; //check if assignment operator works as it should
    assert(c.size() == a.size()); //test if sizes are same
    //test if all of the key and value pairs are equal
    for(int i = 0; i < a.size(); i++)
    {
        c.get(i, key, value);
        a.get(i, key2, value2);
        assert(key == key2 && value == value2);
    }
    
    Map f(a); //check if the copy constructor works as it should
    assert(f.size() == a.size()); //test if sizes are same
    //test if all of the key and value pairs are equal
    for(int i = 0; i < f.size(); i++)
    {
        f.get(i, key, value);
        a.get(i, key2, value2);
        assert(key == key2 && value == value2);
    }


